########################################################################################################################
#
# IMPORTANT NOTE:
#
# Backslashes in a properties file are considered as escape characters. So while specifying property values,
# please take into account the impact of using that character.
# Especially, if you are on Windows OS, paths are usually represented as C:\somepath\someotherpath. While using those paths
# as values to properties here, make sure you either use front-slash (/) character (recommended) and specify it
# as C:/somepath/someotherpath or specify such paths as C:\\somepath\\someotherpath.
#
# For more details please see http://docs.oracle.com/javase/7/docs/api/java/util/Properties.html
#
########################################################################################################################


# The version of the module/project. Example: 1.0.0
module.version=1.0.0

# The type of the source model from which the code will be generated. Valid values are "yang", "json"
source.model.type=json

# The path to the service API descriptor file which represents the service APIs.
# This file will be used to generate the corresponding service artifacts
# Example: /home/me/macaw-services/json/echo-service.json
service.api.descriptor.file=/opt/demos/uscis/design/imagemanager.json

# The full path to the directory where the generated artifacts need to be placed
# Example: /home/me/cfx/generated
artifacts.output.dir=/opt/demos/uscis

# The build tool that will be used for the generated project. 
# Valid values are "ivy" or "maven" or "plain-ant" (without those quotes). 
# At this time, we only support "plain-ant".
project.build.tool=plain-ant

# Configure a build automation tool which will then be used for continuous
# integration of the macaw service. Current supported tool is "jenkins"
project.build.automation.tool=jenkins


# The generated project can be built and deployed/released to release repositories. The organization name
# corresponds to the name of the organization under which this project's artifacts will be released.
# Example: org.myapp
project.dist.organization.name=io.zolontech

# The generated project will depend on Macaw service platform/runtime. The dependency version here specifies
# the version of the Macaw platform on which the generated project depends
# Example: 0.9.4
macaw.platform.version=0.9.8


# whether impl part of service needs to be generated afresh
# false(default) -  will check for impl folder, if not present will generate both api and impl else only api is generated  
# true -  will generate/overwrite the api and impl
# Example: true/false
service.gen.option.generate.impl.artifacts=false

# The programming language that will be used in the implementation for the generated project.
# Valid values are "java", "python" or "nodejs" (without those quotes).
# default value is "java"
#project.impl.language=

# The format(s) that will be used to generate project api documentation.
# Supported formats are "html", "adoc" (for asciidoc), "md" (for markdown).
# The value for this property accepts a comma separated value
# Example: html,md
#service.api.doc.output.format=
